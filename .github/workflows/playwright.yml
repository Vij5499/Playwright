name: Playwright Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    strategy:
      matrix:
        browser: [ chromium, firefox, webkit ]   # 3 parallel jobs
    runs-on: ubuntu-latest
    env:
      PW_BROWSER: ${{ matrix.browser }}          # pass to Playwright

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ env.PW_BROWSER }}

      - name: Run tests
        run: npx playwright test --project=${{ env.PW_BROWSER }}

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ env.PW_BROWSER }}
          path: playwright-report
          retention-days: 30

  perf-smoke:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Debug: List directory structure
      - name: Debug - List directory structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Looking for Dockerfile:"
          find . -name "Dockerfile" -type f

      # 1️⃣ Build the API image (corrected path)
      - name: Build todo-api image
        run: |
          # Option 1: If Dockerfile is in root
          docker build -t todo-api:ci .
          
          # Option 2: If Dockerfile is in a subdirectory, use:
          # docker build -t todo-api:ci ./path/to/dockerfile/directory

      # 2️⃣ Start it detached on known port
      - name: Run todo-api container
        run: docker run -d --name todo-api -p 3000:3000 todo-api:ci

      # 3️⃣ Wait until /todos/1 returns 200 (max 30 s)
      - name: Wait for health-check
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:3000/todos/1 > /dev/null; then
              echo "API healthy ✅"; exit 0
            fi
            echo "Waiting ($i)..."; sleep 1
          done
          echo "API failed health-check ❌"
          echo "Container logs:"
          docker logs todo-api
          exit 1

      # 4️⃣ Run k6 smoke (runner already has k6)
      - name: Run k6 performance smoke
        run: k6 run perf/smoke.js

      # 5️⃣ Always clean up
      - name: Stop and remove container
        if: always()
        run: |
          docker stop todo-api || true
          docker rm todo-api || true